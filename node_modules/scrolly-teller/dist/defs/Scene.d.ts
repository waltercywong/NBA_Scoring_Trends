import { iScene, SceneActivationParams, SceneMountParams, TextItem } from "./Graphic";
import { BehaviorSubject, Observable, Subscription } from "rxjs";
export declare type SceneParams = {
    screenLengths: number;
};
export declare type StageParams = {
    stageOrder: string[];
    stages: {
        [id: string]: Stage;
    };
};
export declare type StageActivationParams = {
    stageProgress$: Observable<string>;
    state: any;
};
export declare type StageData = {
    steps: StepData[];
};
export declare type StepData = {
    id: string;
    screenLengthPos: number;
};
export declare type StageMountParams = {
    state: any;
};
export interface iStage {
    start: number;
    end: number;
    screens: number;
    steps: StepData[];
    stageProgress$: BehaviorSubject<string>;
    activate(params: StageActivationParams & SceneActivationParams): Subscription[];
    mount(p: StageMountParams): StageMountParams;
}
export declare function step(id: string): MethodDecorator;
export declare class Stage implements iStage {
    start: number;
    end: number;
    screens: number;
    steps: StepData[];
    stageProgress$: BehaviorSubject<string>;
    constructor(p: StageData);
    activate(params: StageActivationParams & SceneActivationParams): Subscription[];
    mount(p: StageMountParams): StageMountParams;
}
export declare class StageScene implements iScene {
    screenLengths: number;
    graphicContainer: HTMLDivElement;
    text: TextItem[];
    private steps;
    private stages;
    private stageOrder;
    private state;
    constructor(p: SceneParams & StageParams);
    activate(params: SceneActivationParams): Subscription[];
    mount(params: SceneMountParams): void;
    deactivate(subs: Subscription[]): void;
    private initStages;
}
export declare type VideoParams = {
    framerate: number;
    vidEl: HTMLVideoElement;
    frameStepsDesktop: number;
    frameStepsMobile: number;
    numFrames: number;
    isMobile: boolean;
    text: any[];
    pinZero?: boolean;
};
export declare type VideoSceneParams = SceneParams & VideoParams;
export declare class VideoScene implements iScene {
    screenLengths: number;
    graphicContainer: HTMLDivElement;
    text: TextItem[];
    private vidEl;
    private framerate;
    private frameStepsDesktop;
    private frameStepsMobile;
    private lastDrawn$;
    private lastToDraw$;
    private drain$;
    private remainder$;
    private timeupdate$;
    private numFrames;
    private isMounted;
    private isMobile;
    private pinClass;
    private pinZero;
    constructor(p: VideoSceneParams);
    activate(params: SceneActivationParams): Subscription[];
    private update;
    mount(params: SceneMountParams): void;
    deactivate(subs: Subscription[]): void;
}
